
%-----------------------------------------------------------------------------
% Chapter: Introduction
%-----------------------------------------------------------------------------

\chapter{Introduction}
\label{chap:INTRO}

Many courses in computer science involves programming in several programming
languages.
The nature of programming assignment evaluation
involves process like code testing, debugging, commenting, and code styles
checking.
Which makes the evaluation process of a programming computer science assignment
very different than assignments in many other disciplines.
Also, it would surely motivate students to hand in a higher quality assignment
if more information were provided shortly after their assignments were
submitted.
Therefore, a learning management system (LMS) that can automatically test the
submitted assignments and have the results provided for both the markers and
the students is desired.

\section{Background}

Acadia University currently uses the Moodle Learning System (also known at 
Acadia University as Acorn) as the default LMS.
This system works well for most of the courses, however, it has shortcomings
when it comes to computer science programming assignments due to
the nature of programming source code files and the lack of certain
features, including, but not limited to monospace text font for plain text
file display, programming language detection and syntax
highlighting for source code file display.
Also, it is not uncommon for computer science markers and instructors
trying to put mathematical equations or formulas into their comments on
students' assignments; the only two ways to do that with the Moodle
Learning System are draw the equations or formulas by hand with the
pointing device of the computer (i.e., computer mouse, trackpad), or write
the equations or formulas in \emph{HTML} code. Both of these two ways are
time-consuming and borderline unfeasible.
Moreover, there are features in the Moodle Learning System that are rarely
used by instructors and students (especially instructors and students in
computer science departments), features like \emph{PoodLL Recorder},
\emph{Tags} and \emph{Marking Allocation};
those features increased the
complexity of the system and resulted in the fact that an easy task 
often takes a longer time to finish than it was supposed to. This phenomenon
is known to be a ``Feature Creep''  (Boram Lee and Woohun Lee, 2015 
\cite{featureCreep}), the Microsoft Office Suite is generally
considered to be an example of this phenomenon (Des Traynor 
\cite{msFeatureCreep}).
In short, the Moodle Learning System lacks of features that are essential
to computer science students and instructors, at the same time could slow
down the process of submitting and evaluating assignments with complexity of
the system.

\medskip

The \emph{Course2000} course system designed by Dr.~Rick Giles is a good choice
of alternative LMS to the Moodle Learning System, in fact it has been the
default LMS for one computer science course, \emph{COMP 2103: Programming 3},
for over a decade, with the \emph{Visual Mark} module designed and integrated
by former student Tim Cooper, the \emph{Course2000} system has proven itself
to be very capable of handling computer science assignment. However, with more
and more modifications applied to the system over the years, maintaining
this system has become more and more difficult.

\section{Course2018}
Influenced by the \emph{Course2000} system, the goal of this project is to
develop a secure and dynamic LMS with functionalities designed specifically for
computer science instructors and students, functionalities that mainly focus on
providing informative feedback on programming assignments to both students
and instructors for the purpose of easing the process of learning as well as
evaluation, while maintaining the simplicity of
the overall system design to make sure every task the system needs to
perform can be done efficiently for both the users and the server, also to make
sure that future development and maintenance will not be too difficult.

\subsection{Key features}
The \emph{Course2018} LMS is mainly characterized by the functionalities
described below.

\subsubsection{Source code management}
The \emph{Course2018} LMS provides the abilities for students to manage
their source code more efficiently and more professionally, abilities like 
source code version control, namely, students and instructors are now able
to view the history of every source code file, and more importantly, compare
the changes between different versions of each file.
This is achieved by integrating a great open-source version control system,
\emph{Git}, which was originally developed by \emph{Linus Torvalds} 
(Anthony Scopatz \& Kathryn D. Huff, 2015 \cite{git}),
creator and principal developer of the \emph{Linux} operating system kernel
(Linus Torvalds \& David Diamond, 2001 \cite{lTorvalds}), as well as 
\emph{GitLab}, an open-source Git-repository manager developed by GitLab
Inc.~\cite{gitlab}.

\subsubsection{Souce code display}
A good source code display system with syntax highlighting and line numbering
can significantly improve the readability of source code files and thereby ease
the process of assignment evaluation. In \emph{Course2018} LMS, this is
achieved with two steps: the first step is programming language detection
using a \emph{Unix} library called \emph{libmagic} \cite{libmagic}, once the
programming language is determined, a highlighted text will be generated
with one widely used syntax highlighter, \emph{Pygments} \cite{pygments},
in an \emph{HTML} format.

\subsubsection{Auto testing programming assignments}
When a programming assignment is submitted by a student with \emph{Course2018},
the source code files will be pushed to a remote \emph{GitLab} instance; then
the program will be built (if required) and executed immediately by a script
in a \emph{GitLab} subsystem, \emph{Gitlab CI/CD} \cite{gitlabci},
this script is defined by the instructor prior to the time when the assignment
was published, it contains test data like sample input and output, time limit,
and sample program return code;
finally, an informative test report
will be available for the student who submitted the assignment, markers, and
the instructor after the execution is finished.

\subsubsection{Informative assignment feedback}
The key to providing informative assignment feedback comments in computer
science assignments (especially programming assignments) is to make sure the
comments are well formatted.
The \emph{Moodle Learning System} provides what it is called a
{\hyphenchar\font=-1 ``WYSIWYG''}
(\textbf{W}hat \textbf{Y}ou \textbf{S}ee \textbf{I}s \textbf{W}hat
\textbf{Y}ou \textbf{G}et, 
\emph{``referring to what is displayed on the screen being the same as what
will be printed out''} -- Collins English Dictionary \cite{wysiwyg})
text editor to achieve this goal, however, WYSIWYG editors are generally
inefficient when the formatting gets complicated especially if mathematical
equations are involved.

Alternatively, an easy-to-use plain text markup language called \emph{Markdown}
is introduced to the \emph{Course2018} marking system. This markup language was
designed in a way that it can be converted to an \emph{HTML} format, which is
exactly what this project needs, and it has been
widely used by famous websites including \emph{GitHub} \cite{gitHubMarkdown}
and \emph{Stack Overflow} \cite{stackOverflowMarkdown}.
Moreover, a \emph{Javascript} library call \emph{MathJax} is also integrated
to the marking system so that \TeX\ and \LaTeX\ mathematical notation can be
recognized and displayed.

\subsubsection{Powerful built-in text editor}
With an enhanced assignment feedback solution being mentioned above, a powerful
text editor that supports syntax highlighting, and custom key-bindings is also
desired to ease the actual process of typing for the markers and instructors.
A web-based code editor called \emph{Ace} \cite{aceEditor} is chosen to be
integrated to the marking system for the reasons that firstly it satisfies all
requirements mentioned above, and secondly it has been the default editor for a
lot of famous projects like the \emph{Cloud9 IDE}, which is now part of the
\emph{Amazon Web Services} (Ruben Daniels, 2016 \cite{cloud9}).